import { has, each, set, isEmpty } from 'lodash'
import joi2Swagger from 'joi-to-swagger'

const PATH_DELIMITER = '/'

export default (routes) => {
	const schemas = getComponents(routes, '', {})
	const paths = getPaths(routes, '', {}, schemas)
	return {
		openapi: '3.0.0',
		info: {
			'title': 'BMO',
			'description': 'This does some stuff',
			'contact': {
				'name': 'API Support',
				'url': 'http://www.example.com/support',
				'email': 'support@example.com'
			},
			'version': '1.0.1'
		},
		paths,
		components: { schemas }
	}
}

const getPathParams = (path) => {
	const params = []
	const parts = path.split(PATH_DELIMITER)
	parts.forEach((part) => {
		if (part[0] === ':') {
			params.push(part.substring(1))
		}
	})
	return params.map((name) => ({
		name,
		in: 'path',
		description: `${name} path param`,
		required: true,
		style: 'simple',
		schema: {
			type: 'string'
		}
	}))
}

const formatPathParams = (path) => {
	return path
		.split(PATH_DELIMITER)
		.map((part) => part[0] === ':' ? `{${part.substring(1)}}` : part)
		.join(PATH_DELIMITER)
}

const jsonSchema = (schema, description) => ({
	description,
	content: {
		'application/json': {
			'schema': {
				'$ref': `#/components/schemas/${schema}`
			}
		}
	}
})
const formatters = {
	get: (schema) => ({
		responses: {
			200: jsonSchema(schema)
		}
	}),
	put: (schema) => ({
		requestBody: jsonSchema(schema),
		responses: {
			200: jsonSchema(schema)
		}
	}),
	post: (schema) => ({
		requestBody: jsonSchema(schema),
		responses: {
			201: jsonSchema(schema)
		}
	})
}

const formatRequestParams = (schemaName, httpMethod) => {
	if (formatters[httpMethod]) {
		return formatters[httpMethod](schemaName)
	}
}

const getPathDefinition = (handler, path, components) => {
	const parameters = getPathParams(path)
	const formattedPath = formatPathParams(path)
	const schemaName = getComponentName(path)
	const method = handler.method.toLowerCase()
	let schemaDef = {}
	console.log(components)
	if (handler.schema && components[schemaName]) {
		schemaDef = formatRequestParams(schemaName, method)
	}
	return {
		key: `${formattedPath}.${method}`,
		value: {
			summary: `${method} ${schemaName}`,
			parameters,
			...schemaDef
		}
	}
}

const getPaths = (routes, parentPath, paths, components) => {
	each(routes, (route, key) => {
		if (route.handlers) {
			each(route.handlers, (handler) => {
				const path = `${parentPath}${key}`
				const parameters = getPathParams(path)
				const formattedPath = formatPathParams(path)
				const definition = getPathDefinition(handler, path, components)
				set(paths,
				 definition.key,
					definition.value)
			})
		}
		if (key != 'handlers') {
			getPaths(route, `${parentPath}${key}`, paths, components)
		}
	})
	return paths
}

const getComponentName = (path) => {
	return path.split(PATH_DELIMITER)
		.filter((v) => !isEmpty(v))
		.splice(-2)
		.join('-')
}

const getComponents = (routes, parentPath, aggregate) => {
	each(routes, (route, key) => {
		if (route.handlers) {
			each(route.handlers, (handler) => {
				if (handler.schema) {
					const path = `${parentPath}${key}`
					const componentName = getComponentName(path)
					const formattedPath = formatPathParams(path)
					const { swagger, components } = joi2Swagger(handler.schema, aggregate)
					set(aggregate, componentName, swagger)
				}
			})
		}
		if (key != 'handlers') {
			getComponents(route, `${parentPath}${key}`, aggregate)
		}
	})
	return aggregate
}
