import path from 'path';
import Koa from 'koa';
import Router from 'koa-router';
import proxy from 'koa-proxy';
import staticMiddleware from 'koa-static';
import pkgup from 'pkg-up';
import { merge } from 'lodash';
import loadView from '@bmo/loadView';
import es6Require from '@bmo/es6Require';
import loadDependencies from '@bmo/loadDependencies';
import loadMiddleware from './loadMiddleware';
import swagger from './swagger';

const paths = (dir) => ({
	dependencies: path.resolve(dir, './dependencies'),
	routes: path.resolve(dir, './routes'),
	middleware: path.resolve(dir, './middleware'),
	views: path.resolve(dir, './views')
});

export default class HttpServer {
	constructor (config) {
		this._app = new Koa();
		this.config = config;
	}

	get appName () {
		return this.pkg.name;
	}

	get appVersion () {
		return this.pkg.version;
	}

	get appDescription () {
		return this.pkg.decription;
	}

	get appLicense () {
		return this.pkg.license;
	}

	get app () {
		return this._app;
	}

	get baseDir () {
		return this.config.baseDir || process.cwd();
	}

	get appPaths () {
		if (!this._appPaths) {
			this._appPaths = paths(this.baseDir);
		}
		return this._appPaths;
	}

	get port () {
		return this.config.server.port;
	}

	get viewPath () {
		return this.appPaths.views;
	}

	get routesPath () {
		return this.appPaths.routes;
	}

	get dependenciesPath () {
		return this.appPaths.dependencies;
	}

	async start () {
		if (this._started) {
			throw new Error(`Cannot start same server twice.`);
		}
		this._started = true;
		this._pkg = await pkgup();
		await this._loadDependencies();
		await this._loadMiddleware();
		await this._loadRoutes();
		await this._loadViews();
		await this.app.listen(this.port);
	}

	async _loadDependencies () {
		this.manifest = await loadDependencies(this.config, es6Require(this.dependenciesPath));
	}

	async _loadRoutes () {
		const routes = es6Require(this.routesPath);
		const routeInstances = this._routeInstances = routes(this.manifest);
		swagger({ manifest:this.manifest, app: this.app, routes: routeInstances, Router });
		const routers = routeInstances.map((route) => {
			const apiRouter = new Router();
			// TODO add route specific middleware hook
			apiRouter[route.method.toLowerCase()](route.path, route.handler);
			return apiRouter;
		});
		routers.forEach((router) => {
			this.app.use(router.routes(), router.allowedMethods());
		});
	}

	async _loadViews () {
		const viewRouter = new Router();
		const views = es6Require(this.viewPath);
		views.forEach((view) => {
			loadView(this.config, this.app, viewRouter, view, proxy, staticMiddleware);
		});
		this.app.use(viewRouter.routes());
	}

	async _loadMiddleware () {
		await loadMiddleware(this.config, this.app);
	}
}
